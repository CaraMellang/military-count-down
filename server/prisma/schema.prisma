// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthToken {
  id           Int      @id @default(autoincrement())
  accessToken  String   @unique
  refreshToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  aTExpiredAt  DateTime
  rTExpiredAt  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AccessHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  device    String
  ip        String
  createdAt DateTime @default(now())
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String
  phone         String          @unique
  authToken     AuthToken[]
  accessHistory AccessHistory[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        Int             @default(1)
}

model Coworker {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  devPart   DevPart
  projects  String[]
  coworkerWiki CoworkerWiki?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoworkerWiki {
  id Int @default(autoincrement()) @id
  wiki String?
  coworker Coworker @relation(fields: [coworkerId], references: [id])
  coworkerId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Example {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  // author User? @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DevPart {
  FULL_STACK
  BACKEND
  FRONTEND
}
